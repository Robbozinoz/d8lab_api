<?php

/**
 * @file
 * Functions to support theming in the Bootstrap for Drupal theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Site name, logo and slogan global variable.
 */
function bootstrap_for_drupal_preprocess(&$variables) {
  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
  $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));

  // Add library with custom CSS.
  if (theme_get_setting('custom_css')) {
    $variables['#attached']['library'][] = 'bootstrap_for_drupal/custom-styling';
  }
};

/**
 * Set a placeholder for all search form elements.
 */
function bootstrap_for_drupal_preprocess_input(&$variables) {
  if ($variables['attributes']['type'] == 'search') {
    $variables['attributes']['placeholder'] = t('Search');
  }
}

/**
 * Implements theme_preprocess_textarea.
 */
function bootstrap_for_drupal_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for erro page 403 & 404.
 */
function bootstrap_for_drupal_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  $path_args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
  $suggestions = theme_get_suggestions($path_args, 'page');
  $http_error_suggestions = [
    'system.401' => 'page__401',
    'system.403' => 'page__403',
    'system.404' => 'page__404',
  ];

  $route_name = \Drupal::routeMatch()->getRouteName();
  if (isset($http_error_suggestions[$route_name])) {
    $suggestions[] = $http_error_suggestions[$route_name];
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements theme suggestion for form by ID.
 */
function bootstrap_for_drupal_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Add template suggestion based on form ID.
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
  // Add template suggestion based on form ID and parent comment ID.
  if ($pid = \Drupal::routeMatch()->getParameter('pid')) {
    $suggestions[] = 'form__' . $variables['element']['#form_id'] . '__reply';
    $suggestions[] = 'form__' . $variables['element']['#form_id'] . '__reply__' . $pid;
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function bootstrap_for_drupal_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  if (isset($form_id)) {
    return;
  }

  // Get bfd theme path.
  global $base_url;
  $bfd_path = drupal_get_path('theme', 'bootstrap_for_drupal');
  $custom_css_path = 'public://bfd-custom.css';
  $custom_css_dir = str_replace($base_url . '/', "", file_create_url($custom_css_path));
  $custom_css_url = file_create_url($custom_css_path);

  $form['bfd_custom'] = [
    '#type' => 'fieldset',
    '#title' => t('bfd Customization'),
    '#weight' => -10,
  ];

  $form['bfd_custom']['custom_css'] = [
    '#type' => 'checkbox',
    '#title' => t('Use "bfd-custom.css"'),
    '#description' => t('Include bfd-custom.css file to override or add custom css code without subthememing/hacking bfd Theme.'),
    '#default_value' => theme_get_setting('custom_css'),
  ];

  $form['bfd_custom']['bfd_custom_check'] = [
    '#type' => 'fieldset',
    '#title' => t('Custom CSS file check'),
    '#weight' => 50,
    '#states' => [
      // Hide the settings when the cancel notify checkbox is disabled.
      'visible' => [
        ':input[name="custom_css"]' => ['checked' => TRUE],
      ],
    ],
  ];

  if (file_exists($custom_css_path)) {
    $form['bfd_custom']['bfd_custom_check']['custom_css_description'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['messages', 'messages--status'],
      ],
      'message' => [
        '#markup' => t('Custom CSS file Found in: @css', ['@css' => $custom_css_dir]),
      ],
    ];
  }
  else {
    $form['bfd_custom']['bfd_custom_check']['custom_css_not_found'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['messages', 'messages--error'],
      ],
      'message' => [
        '#markup' => t('Custom CSS file not found. You must create the @css file manually.', ['@css' => $custom_css_dir]),
      ],
    ];
  }
}
