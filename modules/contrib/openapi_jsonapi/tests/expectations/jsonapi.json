{
    "definitions": {
        "openapi_test_entity--camelids": {
            "title": "openapi_test_entity:camelids Schema",
            "description": "Describes the payload for 'openapi_test_entity' entities of the 'camelids' bundle.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "openapi_test_entity--camelids"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__id": {
                                    "type": "integer",
                                    "title": "ID"
                                },
                                "name": {
                                    "type": "string",
                                    "title": "Name",
                                    "maxLength": 50,
                                    "description": "The name of the OpenApi Test Entity entity.",
                                    "default": ""
                                },
                                "field_test_openapi_test_entity": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text",
                                            "maxLength": 255
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Test field"
                                }
                            },
                            "required": [
                                "drupal_internal__id"
                            ]
                        },
                        "relationships": {
                            "description": "Entity relationships",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "openapi_test_entity_type": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "openapi_test_entity_type--openapi_test_entity_type"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "OpenApi Test Entity type"
                                }
                            }
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        },
        "openapi_test_entity--openapi_test_entity_test": {
            "title": "openapi_test_entity:openapi_test_entity_test Schema",
            "description": "Describes the payload for 'openapi_test_entity' entities of the 'openapi_test_entity_test' bundle.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "openapi_test_entity--openapi_test_entity_test"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__id": {
                                    "type": "integer",
                                    "title": "ID"
                                },
                                "name": {
                                    "type": "string",
                                    "title": "Name",
                                    "maxLength": 50,
                                    "description": "The name of the OpenApi Test Entity entity.",
                                    "default": ""
                                },
                                "field_test_openapi_test_entity": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text",
                                            "maxLength": 255
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Test field"
                                }
                            },
                            "required": [
                                "drupal_internal__id"
                            ]
                        },
                        "relationships": {
                            "description": "Entity relationships",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "openapi_test_entity_type": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "openapi_test_entity_type--openapi_test_entity_type"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "OpenApi Test Entity type"
                                }
                            }
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        },
        "taxonomy_term--camelids": {
            "title": "taxonomy_term:camelids Schema",
            "description": "Describes the payload for 'taxonomy_term' entities of the 'camelids' bundle.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "taxonomy_term--camelids"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__tid": {
                                    "type": "integer",
                                    "title": "Term ID",
                                    "description": "The term ID."
                                },
                                "drupal_internal__revision_id": {
                                    "type": "integer",
                                    "title": "Revision ID"
                                },
                                "langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Language",
                                    "description": "The term language code."
                                },
                                "revision_created": {
                                    "type": "number",
                                    "title": "Revision create time",
                                    "format": "utc-millisec",
                                    "description": "The time that the current revision was created."
                                },
                                "revision_log_message": {
                                    "type": "string",
                                    "title": "Revision log message",
                                    "description": "Briefly describe the changes you have made.",
                                    "default": ""
                                },
                                "status": {
                                    "type": "boolean",
                                    "title": "Published",
                                    "default": true
                                },
                                "name": {
                                    "type": "string",
                                    "title": "Name",
                                    "maxLength": 255
                                },
                                "description": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text"
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Description"
                                },
                                "weight": {
                                    "type": "integer",
                                    "title": "Weight",
                                    "description": "The weight of this term in relation to other terms.",
                                    "default": 0
                                },
                                "changed": {
                                    "type": "number",
                                    "title": "Changed",
                                    "format": "utc-millisec",
                                    "description": "The time that the term was last edited."
                                },
                                "default_langcode": {
                                    "type": "boolean",
                                    "title": "Default translation",
                                    "description": "A flag indicating whether this is the default translation.",
                                    "default": true
                                },
                                "revision_default": {
                                    "type": "boolean",
                                    "title": "Default revision",
                                    "description": "A flag indicating whether this was a default revision when it was saved."
                                },
                                "revision_translation_affected": {
                                    "type": "boolean",
                                    "title": "Revision translation affected",
                                    "description": "Indicates if the last edit of a translation belongs to current revision."
                                },
                                "field_test_taxonomy_term": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text",
                                            "maxLength": 255
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Test field"
                                }
                            },
                            "required": [
                                "drupal_internal__tid",
                                "drupal_internal__revision_id",
                                "name",
                                "revision_translation_affected"
                            ]
                        },
                        "relationships": {
                            "description": "Entity relationships",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "vid": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "taxonomy_vocabulary--taxonomy_vocabulary"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "Vocabulary"
                                },
                                "revision_user": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "user--user"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "Revision user"
                                },
                                "parent": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "type",
                                                    "id"
                                                ],
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "title": "Referenced resource",
                                                        "enum": [
                                                            "taxonomy_term--camelids"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "title": "Resource ID",
                                                        "format": "uuid",
                                                        "maxLength": 128
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "title": "Term Parents"
                                }
                            }
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        },
        "taxonomy_term--taxonomy_term_test": {
            "title": "taxonomy_term:taxonomy_term_test Schema",
            "description": "Describes the payload for 'taxonomy_term' entities of the 'taxonomy_term_test' bundle.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "taxonomy_term--taxonomy_term_test"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__tid": {
                                    "type": "integer",
                                    "title": "Term ID",
                                    "description": "The term ID."
                                },
                                "drupal_internal__revision_id": {
                                    "type": "integer",
                                    "title": "Revision ID"
                                },
                                "langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Language",
                                    "description": "The term language code."
                                },
                                "revision_created": {
                                    "type": "number",
                                    "title": "Revision create time",
                                    "format": "utc-millisec",
                                    "description": "The time that the current revision was created."
                                },
                                "revision_log_message": {
                                    "type": "string",
                                    "title": "Revision log message",
                                    "description": "Briefly describe the changes you have made.",
                                    "default": ""
                                },
                                "status": {
                                    "type": "boolean",
                                    "title": "Published",
                                    "default": true
                                },
                                "name": {
                                    "type": "string",
                                    "title": "Name",
                                    "maxLength": 255
                                },
                                "description": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text"
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Description"
                                },
                                "weight": {
                                    "type": "integer",
                                    "title": "Weight",
                                    "description": "The weight of this term in relation to other terms.",
                                    "default": 0
                                },
                                "changed": {
                                    "type": "number",
                                    "title": "Changed",
                                    "format": "utc-millisec",
                                    "description": "The time that the term was last edited."
                                },
                                "default_langcode": {
                                    "type": "boolean",
                                    "title": "Default translation",
                                    "description": "A flag indicating whether this is the default translation.",
                                    "default": true
                                },
                                "revision_default": {
                                    "type": "boolean",
                                    "title": "Default revision",
                                    "description": "A flag indicating whether this was a default revision when it was saved."
                                },
                                "revision_translation_affected": {
                                    "type": "boolean",
                                    "title": "Revision translation affected",
                                    "description": "Indicates if the last edit of a translation belongs to current revision."
                                },
                                "field_test_taxonomy_term": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Text",
                                            "maxLength": 255
                                        },
                                        "format": {
                                            "type": "string",
                                            "title": "Text format"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Test field"
                                }
                            },
                            "required": [
                                "drupal_internal__tid",
                                "drupal_internal__revision_id",
                                "name",
                                "revision_translation_affected"
                            ]
                        },
                        "relationships": {
                            "description": "Entity relationships",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "vid": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "taxonomy_vocabulary--taxonomy_vocabulary"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "Vocabulary"
                                },
                                "revision_user": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "required": [
                                                "type",
                                                "id"
                                            ],
                                            "properties": {
                                                "type": {
                                                    "type": "string",
                                                    "title": "Referenced resource",
                                                    "enum": [
                                                        "user--user"
                                                    ]
                                                },
                                                "id": {
                                                    "type": "string",
                                                    "title": "Resource ID",
                                                    "format": "uuid",
                                                    "maxLength": 128
                                                }
                                            }
                                        }
                                    },
                                    "title": "Revision user"
                                },
                                "parent": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "type",
                                                    "id"
                                                ],
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "title": "Referenced resource",
                                                        "enum": [
                                                            "taxonomy_term--taxonomy_term_test"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "title": "Resource ID",
                                                        "format": "uuid",
                                                        "maxLength": 128
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "title": "Term Parents"
                                }
                            }
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        },
        "user--user": {
            "title": "user Schema",
            "description": "Describes the payload for 'user' entities.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "user--user"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__uid": {
                                    "type": "integer",
                                    "title": "User ID",
                                    "description": "The user ID."
                                },
                                "langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Language code",
                                    "description": "The user language code."
                                },
                                "preferred_langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Preferred language code",
                                    "description": "The user\\'s preferred language code for receiving emails and viewing the site."
                                },
                                "preferred_admin_langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Preferred admin language code",
                                    "description": "The user\\'s preferred language code for viewing administration pages.",
                                    "default": ""
                                },
                                "name": {
                                    "type": "string",
                                    "title": "Name",
                                    "maxLength": 255,
                                    "description": "The name of this user."
                                },
                                "pass": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "The hashed password",
                                            "maxLength": 255
                                        },
                                        "existing": {
                                            "type": "string",
                                            "title": "Existing password"
                                        },
                                        "pre_hashed": {
                                            "type": "boolean",
                                            "title": "Determines if a password needs hashing"
                                        }
                                    },
                                    "title": "Password",
                                    "description": "The password of this user (hashed)."
                                },
                                "mail": {
                                    "type": "string",
                                    "title": "Email",
                                    "format": "email",
                                    "description": "The email of this user.",
                                    "default": ""
                                },
                                "timezone": {
                                    "type": "string",
                                    "title": "Timezone",
                                    "maxLength": 32,
                                    "description": "The timezone of this user."
                                },
                                "status": {
                                    "type": "boolean",
                                    "title": "User status",
                                    "description": "Whether the user is active or blocked.",
                                    "default": false
                                },
                                "created": {
                                    "type": "number",
                                    "title": "Created",
                                    "format": "utc-millisec",
                                    "description": "The time that the user was created."
                                },
                                "changed": {
                                    "type": "number",
                                    "title": "Changed",
                                    "format": "utc-millisec",
                                    "description": "The time that the user was last edited."
                                },
                                "access": {
                                    "type": "number",
                                    "title": "Last access",
                                    "format": "utc-millisec",
                                    "description": "The time that the user last accessed the site.",
                                    "default": 0
                                },
                                "login": {
                                    "type": "number",
                                    "title": "Last login",
                                    "format": "utc-millisec",
                                    "description": "The time that the user last logged in.",
                                    "default": 0
                                },
                                "init": {
                                    "type": "string",
                                    "title": "Initial email",
                                    "format": "email",
                                    "description": "The email address used for initial account creation.",
                                    "default": ""
                                },
                                "default_langcode": {
                                    "type": "boolean",
                                    "title": "Default translation",
                                    "description": "A flag indicating whether this is the default translation.",
                                    "default": true
                                }
                            },
                            "required": [
                                "drupal_internal__uid",
                                "name"
                            ]
                        },
                        "relationships": {
                            "description": "Entity relationships",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "roles": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "type",
                                                    "id"
                                                ],
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "title": "Referenced resource",
                                                        "enum": [
                                                            "user_role--user_role"
                                                        ]
                                                    },
                                                    "id": {
                                                        "type": "string",
                                                        "title": "Resource ID",
                                                        "format": "uuid",
                                                        "maxLength": 128
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "title": "Roles"
                                }
                            }
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        },
        "path_alias--path_alias": {
            "title": "path_alias Schema",
            "description": "Describes the payload for 'path_alias' entities.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "\\\"Resource objects\\\" appear in a JSON:API document to represent resources.",
                    "type": "object",
                    "required": [
                        "type",
                        "id"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "title": "type",
                            "description": "Resource type",
                            "enum": [
                                "path_alias--path_alias"
                            ]
                        },
                        "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                        },
                        "attributes": {
                            "description": "Entity attributes",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "drupal_internal__id": {
                                    "type": "integer",
                                    "title": "ID"
                                },
                                "drupal_internal__revision_id": {
                                    "type": "integer",
                                    "title": "Revision ID"
                                },
                                "langcode": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string",
                                            "title": "Language code"
                                        },
                                        "language": {
                                            "type": "language_reference",
                                            "title": "Language object",
                                            "description": "The referenced language"
                                        }
                                    },
                                    "required": [
                                        "value"
                                    ],
                                    "title": "Language",
                                    "default": "und"
                                },
                                "path": {
                                    "type": "string",
                                    "title": "System path",
                                    "maxLength": 255,
                                    "description": "The path that this alias belongs to."
                                },
                                "alias": {
                                    "type": "string",
                                    "title": "URL alias",
                                    "maxLength": 255,
                                    "description": "An alias used with this path."
                                },
                                "status": {
                                    "type": "boolean",
                                    "title": "Published",
                                    "default": true
                                },
                                "revision_default": {
                                    "type": "boolean",
                                    "title": "Default revision",
                                    "description": "A flag indicating whether this was a default revision when it was saved."
                                }
                            },
                            "required": [
                                "drupal_internal__id",
                                "drupal_internal__revision_id",
                                "path",
                                "alias"
                            ]
                        },
                        "relationships": {
                            "description": "Members of the relationships object('relationships\\\") represent references from the resource object in which it's defined to other resource objects . ",
                            "type": "object",
                            "additionalProperties": false
                        },
                        "links": {
                            "type": "object",
                            "additionalProperties": {
                                "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                "type": "object",
                                "required": [
                                    "href"
                                ],
                                "properties": {
                                    "href": {
                                        "description": "A string containing the link's URL . ",
                                        "type": "string",
                                        "format": "uri - reference"
                                    },
                                    "meta": {
                                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                }
                            }
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                },
                "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                },
                "links": {
                    "type": "object",
                    "additionalProperties": {
                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                        "type": "object",
                        "required": [
                            "href"
                        ],
                        "properties": {
                            "href": {
                                "description": "A string containing the link's URL . ",
                                "type": "string",
                                "format": "uri - reference"
                            },
                            "meta": {
                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                },
                "jsonapi": {
                    "description": "An object describing the server's implementation",
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string"
                        },
                        "meta": {
                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": true
        }
    },
    "paths": {
        "\/action\/action": {
            "get": {
                "summary": "List (Action)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the action--action resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/action\/action\/{entity}": {
            "get": {
                "summary": "View (Action)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the action--action resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the action action"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/base_field_override\/base_field_override": {
            "get": {
                "summary": "List (Base field override)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the base_field_override--base_field_override resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/base_field_override\/base_field_override\/{entity}": {
            "get": {
                "summary": "View (Base field override)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the base_field_override--base_field_override resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the base_field_override base_field_override"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/date_format\/date_format": {
            "get": {
                "summary": "List (Date format)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the date_format--date_format resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/date_format\/date_format\/{entity}": {
            "get": {
                "summary": "View (Date format)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the date_format--date_format resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the date_format date_format"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_form_display\/entity_form_display": {
            "get": {
                "summary": "List (Entity form display)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the entity_form_display--entity_form_display resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_form_display\/entity_form_display\/{entity}": {
            "get": {
                "summary": "View (Entity form display)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the entity_form_display--entity_form_display resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the entity_form_display entity_form_display"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_form_mode\/entity_form_mode": {
            "get": {
                "summary": "List (Form mode)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the entity_form_mode--entity_form_mode resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_form_mode\/entity_form_mode\/{entity}": {
            "get": {
                "summary": "View (Form mode)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the entity_form_mode--entity_form_mode resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the entity_form_mode entity_form_mode"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_view_display\/entity_view_display": {
            "get": {
                "summary": "List (Entity view display)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the entity_view_display--entity_view_display resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_view_display\/entity_view_display\/{entity}": {
            "get": {
                "summary": "View (Entity view display)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the entity_view_display--entity_view_display resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the entity_view_display entity_view_display"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_view_mode\/entity_view_mode": {
            "get": {
                "summary": "List (View mode)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the entity_view_mode--entity_view_mode resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/entity_view_mode\/entity_view_mode\/{entity}": {
            "get": {
                "summary": "View (View mode)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the entity_view_mode--entity_view_mode resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the entity_view_mode entity_view_mode"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/field_config\/field_config": {
            "get": {
                "summary": "List (Field)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the field_config--field_config resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/field_config\/field_config\/{entity}": {
            "get": {
                "summary": "View (Field)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the field_config--field_config resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the field_config field_config"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/field_storage_config\/field_storage_config": {
            "get": {
                "summary": "List (Field storage)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the field_storage_config--field_storage_config resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/field_storage_config\/field_storage_config\/{entity}": {
            "get": {
                "summary": "View (Field storage)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the field_storage_config--field_storage_config resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the field_storage_config field_storage_config"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/filter_format\/filter_format": {
            "get": {
                "summary": "List (Text format)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the filter_format--filter_format resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/filter_format\/filter_format\/{entity}": {
            "get": {
                "summary": "View (Text format)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the filter_format--filter_format resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the filter_format filter_format"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/menu\/menu": {
            "get": {
                "summary": "List (Menu)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the menu--menu resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/menu\/menu\/{entity}": {
            "get": {
                "summary": "View (Menu)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the menu--menu resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the menu menu"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/node_type\/node_type": {
            "get": {
                "summary": "List (Content type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the node_type--node_type resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/node_type\/node_type\/{entity}": {
            "get": {
                "summary": "View (Content type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the node_type--node_type resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the node_type node_type"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/openapi_test_entity\/camelids": {
            "get": {
                "summary": "List (OpenApi Test Entity - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the openapi_test_entity--camelids resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "openapi_test_entity:camelids Schema",
                            "description": "Describes the payload for 'openapi_test_entity' entities of the 'camelids' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/openapi_test_entity--camelids\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (OpenApi Test Entity - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">openapi_test_entity<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--camelids"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/openapi_test_entity\/camelids\/{entity}": {
            "get": {
                "summary": "View (OpenApi Test Entity - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the openapi_test_entity--camelids resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--camelids"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (OpenApi Test Entity - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (OpenApi Test Entity - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">openapi_test_entity<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--camelids"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/openapi_test_entity\/camelids\/{entity}\/openapi_test_entity_type": {
            "get": {
                "summary": "Related: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type through the <em class=\"placeholder\">openapi_test_entity_type<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/openapi_test_entity\/camelids\/{entity}\/relationships\/openapi_test_entity_type": {
            "delete": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type through the <em class=\"placeholder\">openapi_test_entity_type<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/openapi_test_entity\/openapi_test_entity_test": {
            "get": {
                "summary": "List (OpenApi Test Entity - openapi_test_entity_test)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the openapi_test_entity--openapi_test_entity_test resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "openapi_test_entity:openapi_test_entity_test Schema",
                            "description": "Describes the payload for 'openapi_test_entity' entities of the 'openapi_test_entity_test' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/openapi_test_entity--openapi_test_entity_test\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (OpenApi Test Entity - openapi_test_entity_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">openapi_test_entity<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--openapi_test_entity_test"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/openapi_test_entity\/openapi_test_entity_test\/{entity}": {
            "get": {
                "summary": "View (OpenApi Test Entity - openapi_test_entity_test)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the openapi_test_entity--openapi_test_entity_test resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--openapi_test_entity_test"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (OpenApi Test Entity - openapi_test_entity_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (OpenApi Test Entity - openapi_test_entity_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">openapi_test_entity<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/openapi_test_entity--openapi_test_entity_test"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/openapi_test_entity\/openapi_test_entity_test\/{entity}\/openapi_test_entity_type": {
            "get": {
                "summary": "Related: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type through the <em class=\"placeholder\">openapi_test_entity_type<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/openapi_test_entity\/openapi_test_entity_test\/{entity}\/relationships\/openapi_test_entity_type": {
            "delete": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type through the <em class=\"placeholder\">openapi_test_entity_type<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: openapi_test_entity_type (OpenApi Test Entity type)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity openapi_test_entity_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "openapi_test_entity_type--openapi_test_entity_type"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/openapi_test_entity_type\/openapi_test_entity_type": {
            "get": {
                "summary": "List (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/openapi_test_entity_type\/openapi_test_entity_type\/{entity}": {
            "get": {
                "summary": "View (OpenApi Test Entity type)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the openapi_test_entity_type--openapi_test_entity_type resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the openapi_test_entity_type openapi_test_entity_type"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/path_alias\/path_alias": {
            "get": {
                "summary": "List (URL alias)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the path_alias--path_alias resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "path_alias Schema",
                            "description": "Describes the payload for 'path_alias' entities.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/path_alias--path_alias\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (URL alias)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">path_alias<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/path_alias--path_alias"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/path_alias\/path_alias\/{entity}": {
            "get": {
                "summary": "View (URL alias)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the path_alias--path_alias resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the path_alias path_alias"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/path_alias--path_alias"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (URL alias)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the path_alias path_alias"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (URL alias)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the path_alias path_alias"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">path_alias<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/path_alias--path_alias"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/taxonomy_term\/camelids": {
            "get": {
                "summary": "List (Taxonomy term - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the taxonomy_term--camelids resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "taxonomy_term:camelids Schema",
                            "description": "Describes the payload for 'taxonomy_term' entities of the 'camelids' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/taxonomy_term--camelids\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">taxonomy_term<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--camelids"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/taxonomy_term\/camelids\/{entity}": {
            "get": {
                "summary": "View (Taxonomy term - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the taxonomy_term--camelids resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--camelids"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">taxonomy_term<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--camelids"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/parent": {
            "get": {
                "summary": "Related: parent (Taxonomy term - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the taxonomy_term--camelids resource type through the <em class=\"placeholder\">parent<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "taxonomy_term:camelids Schema",
                            "description": "Describes the payload for 'taxonomy_term' entities of the 'camelids' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/taxonomy_term--camelids\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/relationships\/parent": {
            "delete": {
                "summary": "Relationship: parent (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: parent (Taxonomy term - camelids)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the taxonomy_term--camelids resource type through the <em class=\"placeholder\">parent<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--camelids"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: parent (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--camelids"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--camelids"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: parent (Taxonomy term - camelids)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--camelids"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--camelids"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/revision_user": {
            "get": {
                "summary": "Related: revision_user (User)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the user--user resource type through the <em class=\"placeholder\">revision_user<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/user--user"
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/relationships\/revision_user": {
            "delete": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: revision_user (User)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the user--user resource type through the <em class=\"placeholder\">revision_user<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/vid": {
            "get": {
                "summary": "Related: vid (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the <em class=\"placeholder\">vid<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/taxonomy_term\/camelids\/{entity}\/relationships\/vid": {
            "delete": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the <em class=\"placeholder\">vid<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term camelids"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test": {
            "get": {
                "summary": "List (Taxonomy term - taxonomy_term_test)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the taxonomy_term--taxonomy_term_test resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "taxonomy_term:taxonomy_term_test Schema",
                            "description": "Describes the payload for 'taxonomy_term' entities of the 'taxonomy_term_test' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/taxonomy_term--taxonomy_term_test\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">taxonomy_term<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--taxonomy_term_test"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}": {
            "get": {
                "summary": "View (Taxonomy term - taxonomy_term_test)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the taxonomy_term--taxonomy_term_test resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--taxonomy_term_test"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">taxonomy_term<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/taxonomy_term--taxonomy_term_test"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/parent": {
            "get": {
                "summary": "Related: parent (Taxonomy term - taxonomy_term_test)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the taxonomy_term--taxonomy_term_test resource type through the <em class=\"placeholder\">parent<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "taxonomy_term:taxonomy_term_test Schema",
                            "description": "Describes the payload for 'taxonomy_term' entities of the 'taxonomy_term_test' bundle.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/taxonomy_term--taxonomy_term_test\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/relationships\/parent": {
            "delete": {
                "summary": "Relationship: parent (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: parent (Taxonomy term - taxonomy_term_test)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the taxonomy_term--taxonomy_term_test resource type through the <em class=\"placeholder\">parent<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--taxonomy_term_test"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: parent (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--taxonomy_term_test"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--taxonomy_term_test"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: parent (Taxonomy term - taxonomy_term_test)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--taxonomy_term_test"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "taxonomy_term--taxonomy_term_test"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/revision_user": {
            "get": {
                "summary": "Related: revision_user (User)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the user--user resource type through the <em class=\"placeholder\">revision_user<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/user--user"
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/relationships\/revision_user": {
            "delete": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: revision_user (User)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the user--user resource type through the <em class=\"placeholder\">revision_user<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: revision_user (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "user--user"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/vid": {
            "get": {
                "summary": "Related: vid (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the <em class=\"placeholder\">vid<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/taxonomy_term\/taxonomy_term_test\/{entity}\/relationships\/vid": {
            "delete": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the <em class=\"placeholder\">vid<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: vid (Taxonomy vocabulary)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_term taxonomy_term_test"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The \"type\" and \"id\" to non-empty members.",
                                    "type": "object",
                                    "required": [
                                        "type",
                                        "id"
                                    ],
                                    "properties": {
                                        "type": {
                                            "title": "Resource type name",
                                            "type": "string",
                                            "enum": [
                                                "taxonomy_vocabulary--taxonomy_vocabulary"
                                            ]
                                        },
                                        "id": {
                                            "title": "Resource ID",
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true,
                                            "properties": []
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/taxonomy_vocabulary\/taxonomy_vocabulary": {
            "get": {
                "summary": "List (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/taxonomy_vocabulary\/taxonomy_vocabulary\/{entity}": {
            "get": {
                "summary": "View (Taxonomy vocabulary)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the taxonomy_vocabulary--taxonomy_vocabulary resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the taxonomy_vocabulary taxonomy_vocabulary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/user\/user": {
            "get": {
                "summary": "List (User)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the user--user resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "title": "user Schema",
                            "description": "Describes the payload for 'user' entities.",
                            "type": "object",
                            "required": [
                                "data"
                            ],
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/definitions\/user--user\/properties\/data"
                                    }
                                },
                                "meta": {
                                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "links": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "A link **MUST** be represented as either: a string containing the link's URL or a link object . ",
                                        "type": "object",
                                        "required": [
                                            "href"
                                        ],
                                        "properties": {
                                            "href": {
                                                "description": "A string containing the link's URL . ",
                                                "type": "string",
                                                "format": "uri - reference"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                },
                                "jsonapi": {
                                    "description": "An object describing the server's implementation",
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "summary": "Create (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">user<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/user--user"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/user\/user\/{entity}": {
            "get": {
                "summary": "View (User)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the user--user resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#\/definitions\/user--user"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Entity deleted"
                    }
                }
            },
            "patch": {
                "summary": "Update (User)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The <em class=\"placeholder\">user<\/em> object",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/user--user"
                        }
                    }
                ],
                "responses": []
            }
        },
        "\/user\/user\/{entity}\/roles": {
            "get": {
                "summary": "Related: roles (Role)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Related endpoint<\/a><\/em> for the user_role--user_role resource type through the <em class=\"placeholder\">roles<\/em> relationship. The related endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular related resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/user\/user\/{entity}\/relationships\/roles": {
            "delete": {
                "summary": "Relationship: roles (Role)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    }
                }
            },
            "get": {
                "summary": "Relationship: roles (Role)",
                "description": "<em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#fetching-relationships\">Relationship endpoint<\/a><\/em> for the user_role--user_role resource type through the <em class=\"placeholder\">roles<\/em> relationship. The relationship endpoint contains a <em class=\"placeholder\"><a href=\"https:\/\/jsonapi.org\/format\/#document-resource-identifier-objects\">resource identifier object<\/a><\/em> with the data for a particular relationship.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "user_role--user_role"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Relationship: roles (Role)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "user_role--user_role"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "user_role--user_role"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Relationship: roles (Role)",
                "description": null,
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user user"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resource identifier object",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "user_role--user_role"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "An array of objects each containing \\\"type\\\" and \\\"id\\\" members for to-many relationships.",
                                    "type": "array",
                                    "items": {
                                        "description": "The \"type\" and \"id\" to non-empty members.",
                                        "type": "object",
                                        "required": [
                                            "type",
                                            "id"
                                        ],
                                        "properties": {
                                            "type": {
                                                "title": "Resource type name",
                                                "type": "string",
                                                "enum": [
                                                    "user_role--user_role"
                                                ]
                                            },
                                            "id": {
                                                "title": "Resource ID",
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "meta": {
                                                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                                                "type": "object",
                                                "additionalProperties": true,
                                                "properties": []
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/user_role\/user_role": {
            "get": {
                "summary": "List (Role)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Collection endpoint<\/a><\/em> for the user_role--user_role resource type. Collections are a list of <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource objects<\/a><\/em> for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/filtering\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/sorting\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "array",
                        "required": false,
                        "description": "Pagination can be a deceptively complex topic. It's easy to fall into traps and not follow best-practices. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/pagination\">Learn more in the documentation<\/a>."
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "type": "string",
                        "required": false,
                        "description": "Embed related entities in the response. For example: use a query string like <code>?include=comments.author<\/code> to include all the entities referenced by <code>comments<\/code> and all the entities referenced by <code>author<\/code> on those entities!. <a href=\"https:\/\/www.drupal.org\/docs\/8\/modules\/jsonapi\/includes\">Learn more in the documentation<\/a>."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "\/user_role\/user_role\/{entity}": {
            "get": {
                "summary": "View (Role)",
                "description": "<em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#fetching\">Individual endpoint<\/a><\/em> for the user_role--user_role resource type. The individual endpoint contains a <em class=\"placeholder\"><a href=\"http:\/\/jsonapi.org\/format\/#document-resource-objects\">resource object<\/a><\/em> with the data for a particular resource or entity.",
                "parameters": [
                    {
                        "name": "entity",
                        "required": true,
                        "in": "path",
                        "type": "uuid",
                        "description": "The uuid of the user_role user_role"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        }
    }
}